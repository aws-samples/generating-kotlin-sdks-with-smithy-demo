// Code generated by smithy-kotlin-codegen. DO NOT EDIT!

package kotlinconf.elasticleaderboard

import aws.smithy.kotlin.runtime.awsprotocol.ClockSkewInterceptor
import aws.smithy.kotlin.runtime.client.AbstractSdkClientBuilder
import aws.smithy.kotlin.runtime.client.AbstractSdkClientFactory
import aws.smithy.kotlin.runtime.client.IdempotencyTokenConfig
import aws.smithy.kotlin.runtime.client.IdempotencyTokenProvider
import aws.smithy.kotlin.runtime.client.LogMode
import aws.smithy.kotlin.runtime.client.RetryClientConfig
import aws.smithy.kotlin.runtime.client.RetryStrategyClientConfig
import aws.smithy.kotlin.runtime.client.RetryStrategyClientConfigImpl
import aws.smithy.kotlin.runtime.client.SdkClient
import aws.smithy.kotlin.runtime.client.SdkClientConfig
import aws.smithy.kotlin.runtime.http.auth.AuthScheme
import aws.smithy.kotlin.runtime.http.auth.HttpAuthConfig
import aws.smithy.kotlin.runtime.http.config.HttpClientConfig
import aws.smithy.kotlin.runtime.http.config.HttpEngineConfig
import aws.smithy.kotlin.runtime.http.engine.HttpClientEngine
import aws.smithy.kotlin.runtime.http.engine.HttpEngineConfigImpl
import aws.smithy.kotlin.runtime.http.interceptors.HttpInterceptor
import aws.smithy.kotlin.runtime.retries.RetryStrategy
import aws.smithy.kotlin.runtime.retries.policy.RetryPolicy
import aws.smithy.kotlin.runtime.retries.policy.StandardRetryPolicy
import aws.smithy.kotlin.runtime.telemetry.Global
import aws.smithy.kotlin.runtime.telemetry.TelemetryConfig
import aws.smithy.kotlin.runtime.telemetry.TelemetryProvider
import kotlin.collections.List
import kotlin.jvm.JvmStatic
import kotlinconf.elasticleaderboard.auth.DefaultElasticLeaderboardAuthSchemeProvider
import kotlinconf.elasticleaderboard.auth.ElasticLeaderboardAuthSchemeProvider
import kotlinconf.elasticleaderboard.endpoints.ElasticLeaderboardEndpointParameters
import kotlinconf.elasticleaderboard.endpoints.ElasticLeaderboardEndpointProvider
import kotlinconf.elasticleaderboard.model.CreateLeaderboardRequest
import kotlinconf.elasticleaderboard.model.CreateLeaderboardResponse
import kotlinconf.elasticleaderboard.model.DeleteLeaderboardRequest
import kotlinconf.elasticleaderboard.model.DeleteLeaderboardResponse
import kotlinconf.elasticleaderboard.model.GetLeaderboardRequest
import kotlinconf.elasticleaderboard.model.GetLeaderboardResponse
import kotlinconf.elasticleaderboard.model.ListLeaderboardsRequest
import kotlinconf.elasticleaderboard.model.ListLeaderboardsResponse
import kotlinconf.elasticleaderboard.model.SubmitScoreEventRequest
import kotlinconf.elasticleaderboard.model.SubmitScoreEventResponse
import kotlinconf.elasticleaderboard.model.UpdateLeaderboardRequest
import kotlinconf.elasticleaderboard.model.UpdateLeaderboardResponse


public const val ServiceId: String = "ElasticLeaderboardService"
public const val SdkVersion: String = "1.0"
public const val ServiceApiVersion: String = "2020-10-16"

/**
 * Provides access to leaderboards and top scores
 */
public interface ElasticLeaderboardClient : SdkClient {
    /**
     * ElasticLeaderboardClient's configuration
     */
    public override val config: Config

    public companion object : AbstractSdkClientFactory<Config, Config.Builder, ElasticLeaderboardClient, Builder>() {
        @JvmStatic
        override fun builder(): Builder = Builder()

        override fun finalizeConfig(builder: Builder) {
            super.finalizeConfig(builder)
            builder.config.interceptors.add(0, ClockSkewInterceptor())
        }
    }

    public class Builder internal constructor(): AbstractSdkClientBuilder<Config, Config.Builder, ElasticLeaderboardClient>() {
        override val config: Config.Builder = Config.Builder()
        override fun newClient(config: Config): ElasticLeaderboardClient = DefaultElasticLeaderboardClient(config)
    }

    public class Config private constructor(builder: Builder) : HttpAuthConfig, HttpClientConfig, HttpEngineConfig by builder.buildHttpEngineConfig(), IdempotencyTokenConfig, RetryClientConfig, RetryStrategyClientConfig by builder.buildRetryStrategyClientConfig(), SdkClientConfig, TelemetryConfig {
        override val clientName: String = builder.clientName
        override val authSchemes: kotlin.collections.List<aws.smithy.kotlin.runtime.http.auth.AuthScheme> = builder.authSchemes
        public val endpointProvider: ElasticLeaderboardEndpointProvider = requireNotNull(builder.endpointProvider) { "endpointProvider is a required configuration property" }
        override val idempotencyTokenProvider: IdempotencyTokenProvider = builder.idempotencyTokenProvider ?: IdempotencyTokenProvider.Default
        override val interceptors: kotlin.collections.List<aws.smithy.kotlin.runtime.http.interceptors.HttpInterceptor> = builder.interceptors
        override val logMode: LogMode = builder.logMode ?: LogMode.Default
        override val retryPolicy: RetryPolicy<Any?> = builder.retryPolicy ?: StandardRetryPolicy.Default
        override val telemetryProvider: TelemetryProvider = builder.telemetryProvider ?: TelemetryProvider.Global
        public val authSchemeProvider: ElasticLeaderboardAuthSchemeProvider = builder.authSchemeProvider ?: DefaultElasticLeaderboardAuthSchemeProvider()
        public companion object {
            public inline operator fun invoke(block: Builder.() -> kotlin.Unit): Config = Builder().apply(block).build()
        }

        public fun toBuilder(): Builder = Builder().apply {
            clientName = this@Config.clientName
            authSchemes = this@Config.authSchemes
            endpointProvider = this@Config.endpointProvider
            httpClient = this@Config.httpClient
            idempotencyTokenProvider = this@Config.idempotencyTokenProvider
            interceptors = this@Config.interceptors.toMutableList()
            logMode = this@Config.logMode
            retryPolicy = this@Config.retryPolicy
            retryStrategy = this@Config.retryStrategy
            telemetryProvider = this@Config.telemetryProvider
            authSchemeProvider = this@Config.authSchemeProvider
        }

        public class Builder : HttpAuthConfig.Builder, HttpClientConfig.Builder, HttpEngineConfig.Builder by HttpEngineConfigImpl.BuilderImpl(), IdempotencyTokenConfig.Builder, RetryClientConfig.Builder, RetryStrategyClientConfig.Builder by RetryStrategyClientConfigImpl.BuilderImpl(), SdkClientConfig.Builder<Config>, TelemetryConfig.Builder {
            /**
             * A reader-friendly name for the client.
             */
            override var clientName: String = "ElasticLeaderboardService"

            /**
             * Register new or override default [AuthScheme]s configured for this client. By default, the set
             * of auth schemes configured comes from the service model. An auth scheme configured explicitly takes
             * precedence over the defaults and can be used to customize identity resolution and signing for specific
             * authentication schemes.
             */
            override var authSchemes: kotlin.collections.List<aws.smithy.kotlin.runtime.http.auth.AuthScheme> = emptyList()

            /**
             * The endpoint provider used to determine where to make service requests. **This is an advanced config
             * option.**
             *
             * Endpoint resolution occurs as part of the workflow for every request made via the service client.
             *
             * The inputs to endpoint resolution are defined on a per-service basis (see [EndpointParameters]).
             */
            public var endpointProvider: ElasticLeaderboardEndpointProvider? = null

            /**
             * Override the default idempotency token generator. SDK clients will generate tokens for members
             * that represent idempotent tokens when not explicitly set by the caller using this generator.
             */
            override var idempotencyTokenProvider: IdempotencyTokenProvider? = null

            /**
             * Add an [aws.smithy.kotlin.runtime.client.Interceptor] that will have access to read and modify
             * the request and response objects as they are processed by the SDK.
             * Interceptors added using this method are executed in the order they are configured and are always
             * later than any added automatically by the SDK.
             */
            override var interceptors: kotlin.collections.MutableList<aws.smithy.kotlin.runtime.http.interceptors.HttpInterceptor> = kotlin.collections.mutableListOf()

            /**
             * Configure events that will be logged. By default clients will not output
             * raw requests or responses. Use this setting to opt-in to additional debug logging.
             *
             * This can be used to configure logging of requests, responses, retries, etc of SDK clients.
             *
             * **NOTE**: Logging of raw requests or responses may leak sensitive information! It may also have
             * performance considerations when dumping the request/response body. This is primarily a tool for
             * debug purposes.
             */
            override var logMode: LogMode? = null

            /**
             * The policy to use for evaluating operation results and determining whether/how to retry.
             */
            override var retryPolicy: RetryPolicy<Any?>? = null

            /**
             * The telemetry provider used to instrument the SDK operations with. By default, the global telemetry
             * provider will be used.
             */
            override var telemetryProvider: TelemetryProvider? = null

            /**
             * Configure the provider used to resolve the authentication scheme to use for a particular operation.
             */
            public var authSchemeProvider: ElasticLeaderboardAuthSchemeProvider? = null

            override fun build(): Config = Config(this)
        }
    }

    /**
     * Create a new leaderboard
     */
    public suspend fun createLeaderboard(input: CreateLeaderboardRequest): CreateLeaderboardResponse

    /**
     * Delete a leaderboard
     */
    public suspend fun deleteLeaderboard(input: DeleteLeaderboardRequest): DeleteLeaderboardResponse

    /**
     * Get detailed information about a specific leaderboard including it's high scores
     */
    public suspend fun getLeaderboard(input: GetLeaderboardRequest): GetLeaderboardResponse

    /**
     * List the available leaderboards
     */
    public suspend fun listLeaderboards(input: ListLeaderboardsRequest = ListLeaderboardsRequest { }): ListLeaderboardsResponse

    /**
     * Log a new high score for a user
     */
    public suspend fun submitScoreEvent(input: SubmitScoreEventRequest): SubmitScoreEventResponse

    /**
     * Update a leaderboard's configuration
     */
    public suspend fun updateLeaderboard(input: UpdateLeaderboardRequest): UpdateLeaderboardResponse
}

/**
 * Create a copy of the client with one or more configuration values overridden.
 * This method allows the caller to perform scoped config overrides for one or more client operations.
 *
 * Any resources created on your behalf will be shared between clients, and will only be closed when ALL clients using them are closed.
 * If you provide a resource (e.g. [HttpClientEngine]) to the SDK, you are responsible for managing the lifetime of that resource.
 */
public fun ElasticLeaderboardClient.withConfig(block: ElasticLeaderboardClient.Config.Builder.() -> Unit): ElasticLeaderboardClient {
    val newConfig = config.toBuilder().apply(block).build()
    return DefaultElasticLeaderboardClient(newConfig)
}

/**
 * Create a new leaderboard
 */
public suspend inline fun ElasticLeaderboardClient.createLeaderboard(crossinline block: CreateLeaderboardRequest.Builder.() -> Unit): CreateLeaderboardResponse = createLeaderboard(CreateLeaderboardRequest.Builder().apply(block).build())

/**
 * Delete a leaderboard
 */
public suspend inline fun ElasticLeaderboardClient.deleteLeaderboard(crossinline block: DeleteLeaderboardRequest.Builder.() -> Unit): DeleteLeaderboardResponse = deleteLeaderboard(DeleteLeaderboardRequest.Builder().apply(block).build())

/**
 * Get detailed information about a specific leaderboard including it's high scores
 */
public suspend inline fun ElasticLeaderboardClient.getLeaderboard(crossinline block: GetLeaderboardRequest.Builder.() -> Unit): GetLeaderboardResponse = getLeaderboard(GetLeaderboardRequest.Builder().apply(block).build())

/**
 * List the available leaderboards
 */
public suspend inline fun ElasticLeaderboardClient.listLeaderboards(crossinline block: ListLeaderboardsRequest.Builder.() -> Unit): ListLeaderboardsResponse = listLeaderboards(ListLeaderboardsRequest.Builder().apply(block).build())

/**
 * Log a new high score for a user
 */
public suspend inline fun ElasticLeaderboardClient.submitScoreEvent(crossinline block: SubmitScoreEventRequest.Builder.() -> Unit): SubmitScoreEventResponse = submitScoreEvent(SubmitScoreEventRequest.Builder().apply(block).build())

/**
 * Update a leaderboard's configuration
 */
public suspend inline fun ElasticLeaderboardClient.updateLeaderboard(crossinline block: UpdateLeaderboardRequest.Builder.() -> Unit): UpdateLeaderboardResponse = updateLeaderboard(UpdateLeaderboardRequest.Builder().apply(block).build())
