// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub async fn de_list_leaderboards_http_request<B>(
    #[allow(unused_variables)] request: ::http::Request<B>
) -> std::result::Result<
    crate::input::ListLeaderboardsInput,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection
>
where
    B: ::aws_smithy_http_server::body::HttpBody + Send, 
    B::Data: Send,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::RequestRejection: From<<B as ::aws_smithy_http_server::body::HttpBody>::Error> {
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::list_leaderboards_input::Builder::default();
        #[allow(unused_variables)]
        let ::aws_smithy_runtime_api::http::RequestParts { uri, headers, body, .. } = ::aws_smithy_runtime_api::http::Request::try_from(request)?.into_parts();
        let query_string = uri.query().unwrap_or("");
        let pairs = ::form_urlencoded::parse(query_string.as_bytes());
        let mut max_results_seen = false;
        let mut next_token_seen = false;
        for (k, v) in pairs {
            if !max_results_seen && k == "maxResults" {
                input = input.set_max_results(
                    crate::protocol_serde::shape_list_leaderboards_input::de_max_results(&v)?
                );
                max_results_seen = true;
            }
            if !next_token_seen && k == "nextToken" {
                input = input.set_next_token(
                    crate::protocol_serde::shape_list_leaderboards_input::de_next_token(&v)?
                );
                next_token_seen = true;
            }
        }
        input.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn ser_list_leaderboards_http_response(
    #[allow(unused_variables)] output: crate::output::ListLeaderboardsOutput
) -> std::result::Result<
    ::aws_smithy_http_server::response::Response,
    ::aws_smithy_http_server::protocol::rest_json_1::rejection::ResponseRejection
> {
    Ok({
        #[allow(unused_mut)]
        let mut builder = ::http::Response::builder();
        builder = ::aws_smithy_http::header::set_response_header_if_absent(
                            builder,
                            ::http::header::CONTENT_TYPE,
                            "application/json"
                        );
        let http_status: u16 = 200;
                        builder = builder.status(http_status);
        let payload =
            crate::protocol_serde::shape_list_leaderboards_output::ser_list_leaderboards_output_output_output(&output)?
        ;
        let content_length = payload.len();
                    builder = ::aws_smithy_http::header::set_response_header_if_absent(builder, ::http::header::CONTENT_LENGTH, content_length);
        let body = ::aws_smithy_http_server::body::to_boxed(payload);
        builder.body(body)?
    })
}

