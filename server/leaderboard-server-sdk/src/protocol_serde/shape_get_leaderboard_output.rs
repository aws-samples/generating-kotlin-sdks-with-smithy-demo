// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_leaderboard_output_output_output(value: &crate::output::GetLeaderboardOutput) -> Result<String, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_get_leaderboard_output::ser_get_leaderboard_output_output(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn ser_get_leaderboard_output_output(
                         object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
                         input: &crate::output::GetLeaderboardOutput,
                    ) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.high_scores {
        let mut array_2 = object.key("highScores").start_array();
        for item_3 in var_1 {
             {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_score_event::ser_score_event(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.max_entries {
        object.key("maxEntries").number(#[allow(clippy::useless_conversion)]::aws_smithy_types::Number::NegInt((var_5.0).into()));
    }
    if let Some(var_6) = &input.name {
        object.key("name").string(var_6.as_str());
    }
    Ok(())
}

