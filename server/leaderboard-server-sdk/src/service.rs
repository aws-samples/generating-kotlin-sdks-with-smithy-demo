// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// The service builder for [`ElasticLeaderboardService`].
                ///
                /// Constructed via [`ElasticLeaderboardService::builder`].
                pub struct ElasticLeaderboardServiceBuilder<Body, L, HttpPl, ModelPl> {
                    create_leaderboard: Option<::aws_smithy_http_server::routing::Route<Body>>, delete_leaderboard: Option<::aws_smithy_http_server::routing::Route<Body>>, get_leaderboard: Option<::aws_smithy_http_server::routing::Route<Body>>, list_leaderboards: Option<::aws_smithy_http_server::routing::Route<Body>>, submit_score_event: Option<::aws_smithy_http_server::routing::Route<Body>>, update_leaderboard: Option<::aws_smithy_http_server::routing::Route<Body>>,
                    layer: L,
                    http_plugin: HttpPl,
                    model_plugin: ModelPl
                }

                impl<Body, L, HttpPl, ModelPl> ElasticLeaderboardServiceBuilder<Body, L, HttpPl, ModelPl> {
                    /// Sets the [`CreateLeaderboard`](crate::operation_shape::CreateLeaderboard) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::CreateLeaderboardInput) -> Result<output::CreateLeaderboardOutput, error::CreateLeaderboardError> {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .create_leaderboard(handler)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn create_leaderboard<HandlerType, HandlerExtractors, UpgradeExtractors>(self, handler: HandlerType) -> Self
                    where
                        HandlerType: ::aws_smithy_http_server::operation::Handler<crate::operation_shape::CreateLeaderboard, HandlerExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::CreateLeaderboard,
                            ::aws_smithy_http_server::operation::IntoService<crate::operation_shape::CreateLeaderboard, HandlerType>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::CreateLeaderboard,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::CreateLeaderboard,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::CreateLeaderboard,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::CreateLeaderboard::from_handler(handler);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.create_leaderboard_custom(svc)
                    }

                    /// Sets the [`CreateLeaderboard`](crate::operation_shape::CreateLeaderboard) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::CreateLeaderboardInput) -> Result<output::CreateLeaderboardOutput, error::CreateLeaderboardError> {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let svc = ::tower::util::service_fn(handler);
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .create_leaderboard_service(svc)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn create_leaderboard_service<S, ServiceExtractors, UpgradeExtractors>(self, service: S) -> Self
                    where
                        S: ::aws_smithy_http_server::operation::OperationService<crate::operation_shape::CreateLeaderboard, ServiceExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::CreateLeaderboard,
                            ::aws_smithy_http_server::operation::Normalize<crate::operation_shape::CreateLeaderboard, S>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::CreateLeaderboard,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::CreateLeaderboard,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::CreateLeaderboard,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::CreateLeaderboard::from_service(service);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.create_leaderboard_custom(svc)
                    }

                    /// Sets the [`CreateLeaderboard`](crate::operation_shape::CreateLeaderboard) to a custom [`Service`](tower::Service).
                    /// not constrained by the Smithy contract.
                    fn create_leaderboard_custom<S>(mut self, svc: S) -> Self
                    where
                        S: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        S::Future: Send + 'static,
                    {
                        self.create_leaderboard = Some(::aws_smithy_http_server::routing::Route::new(svc));
                        self
                    }

/// Sets the [`DeleteLeaderboard`](crate::operation_shape::DeleteLeaderboard) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::DeleteLeaderboardInput) -> Result<output::DeleteLeaderboardOutput, error::DeleteLeaderboardError> {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .delete_leaderboard(handler)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn delete_leaderboard<HandlerType, HandlerExtractors, UpgradeExtractors>(self, handler: HandlerType) -> Self
                    where
                        HandlerType: ::aws_smithy_http_server::operation::Handler<crate::operation_shape::DeleteLeaderboard, HandlerExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::DeleteLeaderboard,
                            ::aws_smithy_http_server::operation::IntoService<crate::operation_shape::DeleteLeaderboard, HandlerType>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::DeleteLeaderboard,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::DeleteLeaderboard,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::DeleteLeaderboard,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::DeleteLeaderboard::from_handler(handler);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.delete_leaderboard_custom(svc)
                    }

                    /// Sets the [`DeleteLeaderboard`](crate::operation_shape::DeleteLeaderboard) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::DeleteLeaderboardInput) -> Result<output::DeleteLeaderboardOutput, error::DeleteLeaderboardError> {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let svc = ::tower::util::service_fn(handler);
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .delete_leaderboard_service(svc)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn delete_leaderboard_service<S, ServiceExtractors, UpgradeExtractors>(self, service: S) -> Self
                    where
                        S: ::aws_smithy_http_server::operation::OperationService<crate::operation_shape::DeleteLeaderboard, ServiceExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::DeleteLeaderboard,
                            ::aws_smithy_http_server::operation::Normalize<crate::operation_shape::DeleteLeaderboard, S>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::DeleteLeaderboard,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::DeleteLeaderboard,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::DeleteLeaderboard,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::DeleteLeaderboard::from_service(service);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.delete_leaderboard_custom(svc)
                    }

                    /// Sets the [`DeleteLeaderboard`](crate::operation_shape::DeleteLeaderboard) to a custom [`Service`](tower::Service).
                    /// not constrained by the Smithy contract.
                    fn delete_leaderboard_custom<S>(mut self, svc: S) -> Self
                    where
                        S: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        S::Future: Send + 'static,
                    {
                        self.delete_leaderboard = Some(::aws_smithy_http_server::routing::Route::new(svc));
                        self
                    }

/// Sets the [`GetLeaderboard`](crate::operation_shape::GetLeaderboard) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::GetLeaderboardInput) -> Result<output::GetLeaderboardOutput, error::GetLeaderboardError> {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .get_leaderboard(handler)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn get_leaderboard<HandlerType, HandlerExtractors, UpgradeExtractors>(self, handler: HandlerType) -> Self
                    where
                        HandlerType: ::aws_smithy_http_server::operation::Handler<crate::operation_shape::GetLeaderboard, HandlerExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::GetLeaderboard,
                            ::aws_smithy_http_server::operation::IntoService<crate::operation_shape::GetLeaderboard, HandlerType>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::GetLeaderboard,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::GetLeaderboard,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::GetLeaderboard,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::GetLeaderboard::from_handler(handler);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.get_leaderboard_custom(svc)
                    }

                    /// Sets the [`GetLeaderboard`](crate::operation_shape::GetLeaderboard) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::GetLeaderboardInput) -> Result<output::GetLeaderboardOutput, error::GetLeaderboardError> {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let svc = ::tower::util::service_fn(handler);
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .get_leaderboard_service(svc)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn get_leaderboard_service<S, ServiceExtractors, UpgradeExtractors>(self, service: S) -> Self
                    where
                        S: ::aws_smithy_http_server::operation::OperationService<crate::operation_shape::GetLeaderboard, ServiceExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::GetLeaderboard,
                            ::aws_smithy_http_server::operation::Normalize<crate::operation_shape::GetLeaderboard, S>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::GetLeaderboard,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::GetLeaderboard,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::GetLeaderboard,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::GetLeaderboard::from_service(service);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.get_leaderboard_custom(svc)
                    }

                    /// Sets the [`GetLeaderboard`](crate::operation_shape::GetLeaderboard) to a custom [`Service`](tower::Service).
                    /// not constrained by the Smithy contract.
                    fn get_leaderboard_custom<S>(mut self, svc: S) -> Self
                    where
                        S: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        S::Future: Send + 'static,
                    {
                        self.get_leaderboard = Some(::aws_smithy_http_server::routing::Route::new(svc));
                        self
                    }

/// Sets the [`ListLeaderboards`](crate::operation_shape::ListLeaderboards) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::ListLeaderboardsInput) -> output::ListLeaderboardsOutput {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .list_leaderboards(handler)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn list_leaderboards<HandlerType, HandlerExtractors, UpgradeExtractors>(self, handler: HandlerType) -> Self
                    where
                        HandlerType: ::aws_smithy_http_server::operation::Handler<crate::operation_shape::ListLeaderboards, HandlerExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::ListLeaderboards,
                            ::aws_smithy_http_server::operation::IntoService<crate::operation_shape::ListLeaderboards, HandlerType>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::ListLeaderboards,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::ListLeaderboards,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::ListLeaderboards,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::ListLeaderboards::from_handler(handler);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.list_leaderboards_custom(svc)
                    }

                    /// Sets the [`ListLeaderboards`](crate::operation_shape::ListLeaderboards) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::ListLeaderboardsInput) -> Result<output::ListLeaderboardsOutput, std::convert::Infallible> {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let svc = ::tower::util::service_fn(handler);
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .list_leaderboards_service(svc)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn list_leaderboards_service<S, ServiceExtractors, UpgradeExtractors>(self, service: S) -> Self
                    where
                        S: ::aws_smithy_http_server::operation::OperationService<crate::operation_shape::ListLeaderboards, ServiceExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::ListLeaderboards,
                            ::aws_smithy_http_server::operation::Normalize<crate::operation_shape::ListLeaderboards, S>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::ListLeaderboards,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::ListLeaderboards,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::ListLeaderboards,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::ListLeaderboards::from_service(service);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.list_leaderboards_custom(svc)
                    }

                    /// Sets the [`ListLeaderboards`](crate::operation_shape::ListLeaderboards) to a custom [`Service`](tower::Service).
                    /// not constrained by the Smithy contract.
                    fn list_leaderboards_custom<S>(mut self, svc: S) -> Self
                    where
                        S: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        S::Future: Send + 'static,
                    {
                        self.list_leaderboards = Some(::aws_smithy_http_server::routing::Route::new(svc));
                        self
                    }

/// Sets the [`SubmitScoreEvent`](crate::operation_shape::SubmitScoreEvent) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::SubmitScoreEventInput) -> Result<output::SubmitScoreEventOutput, error::SubmitScoreEventError> {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .submit_score_event(handler)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn submit_score_event<HandlerType, HandlerExtractors, UpgradeExtractors>(self, handler: HandlerType) -> Self
                    where
                        HandlerType: ::aws_smithy_http_server::operation::Handler<crate::operation_shape::SubmitScoreEvent, HandlerExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::SubmitScoreEvent,
                            ::aws_smithy_http_server::operation::IntoService<crate::operation_shape::SubmitScoreEvent, HandlerType>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::SubmitScoreEvent,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::SubmitScoreEvent,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::SubmitScoreEvent,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::SubmitScoreEvent::from_handler(handler);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.submit_score_event_custom(svc)
                    }

                    /// Sets the [`SubmitScoreEvent`](crate::operation_shape::SubmitScoreEvent) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::SubmitScoreEventInput) -> Result<output::SubmitScoreEventOutput, error::SubmitScoreEventError> {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let svc = ::tower::util::service_fn(handler);
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .submit_score_event_service(svc)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn submit_score_event_service<S, ServiceExtractors, UpgradeExtractors>(self, service: S) -> Self
                    where
                        S: ::aws_smithy_http_server::operation::OperationService<crate::operation_shape::SubmitScoreEvent, ServiceExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::SubmitScoreEvent,
                            ::aws_smithy_http_server::operation::Normalize<crate::operation_shape::SubmitScoreEvent, S>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::SubmitScoreEvent,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::SubmitScoreEvent,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::SubmitScoreEvent,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::SubmitScoreEvent::from_service(service);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.submit_score_event_custom(svc)
                    }

                    /// Sets the [`SubmitScoreEvent`](crate::operation_shape::SubmitScoreEvent) to a custom [`Service`](tower::Service).
                    /// not constrained by the Smithy contract.
                    fn submit_score_event_custom<S>(mut self, svc: S) -> Self
                    where
                        S: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        S::Future: Send + 'static,
                    {
                        self.submit_score_event = Some(::aws_smithy_http_server::routing::Route::new(svc));
                        self
                    }

/// Sets the [`UpdateLeaderboard`](crate::operation_shape::UpdateLeaderboard) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::UpdateLeaderboardInput) -> Result<output::UpdateLeaderboardOutput, error::UpdateLeaderboardError> {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .update_leaderboard(handler)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn update_leaderboard<HandlerType, HandlerExtractors, UpgradeExtractors>(self, handler: HandlerType) -> Self
                    where
                        HandlerType: ::aws_smithy_http_server::operation::Handler<crate::operation_shape::UpdateLeaderboard, HandlerExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::UpdateLeaderboard,
                            ::aws_smithy_http_server::operation::IntoService<crate::operation_shape::UpdateLeaderboard, HandlerType>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::UpdateLeaderboard,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::UpdateLeaderboard,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::UpdateLeaderboard,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::UpdateLeaderboard::from_handler(handler);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.update_leaderboard_custom(svc)
                    }

                    /// Sets the [`UpdateLeaderboard`](crate::operation_shape::UpdateLeaderboard) operation.
                    ///
                    /// This should be an async function satisfying the [`Handler`](::aws_smithy_http_server::operation::Handler) trait.
                    /// See the [operation module documentation](::aws_smithy_http_server::operation) for more information.
                    ///
                    /// # Example
                    ///
                    /// ```no_run
                    /// use leaderboard_server_sdk::{ElasticLeaderboardService, ElasticLeaderboardServiceConfig};
                    ///
                    /// use leaderboard_server_sdk::{input, output, error};
                    ///
                    /// async fn handler(input: input::UpdateLeaderboardInput) -> Result<output::UpdateLeaderboardOutput, error::UpdateLeaderboardError> {
///     todo!()
/// }
                    ///
                    /// let config = ElasticLeaderboardServiceConfig::builder().build();
                    /// let svc = ::tower::util::service_fn(handler);
                    /// let app = ElasticLeaderboardService::builder(config)
                    ///     .update_leaderboard_service(svc)
                    ///     /* Set other handlers */
                    ///     .build()
                    ///     .unwrap();
                    /// # let app: ElasticLeaderboardService<::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>> = app;
                    /// ```
                    ///
                    pub fn update_leaderboard_service<S, ServiceExtractors, UpgradeExtractors>(self, service: S) -> Self
                    where
                        S: ::aws_smithy_http_server::operation::OperationService<crate::operation_shape::UpdateLeaderboard, ServiceExtractors>,

                        ModelPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::UpdateLeaderboard,
                            ::aws_smithy_http_server::operation::Normalize<crate::operation_shape::UpdateLeaderboard, S>
                        >,
                        ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::UpdateLeaderboard,
                            ModelPl::Output
                        >,
                        HttpPl: ::aws_smithy_http_server::plugin::Plugin<
                            ElasticLeaderboardService<L>,
                            crate::operation_shape::UpdateLeaderboard,
                            <
                                ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>
                                as ::aws_smithy_http_server::plugin::Plugin<
                                    ElasticLeaderboardService<L>,
                                    crate::operation_shape::UpdateLeaderboard,
                                    ModelPl::Output
                                >
                            >::Output
                        >,

                        HttpPl::Output: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        <HttpPl::Output as ::tower::Service<::http::Request<Body>>>::Future: Send + 'static,

                    {
                        use ::aws_smithy_http_server::operation::OperationShapeExt;
                        use ::aws_smithy_http_server::plugin::Plugin;
                        let svc = crate::operation_shape::UpdateLeaderboard::from_service(service);
                        let svc = self.model_plugin.apply(svc);
                        let svc = ::aws_smithy_http_server::operation::UpgradePlugin::<UpgradeExtractors>::new().apply(svc);
                        let svc = self.http_plugin.apply(svc);
                        self.update_leaderboard_custom(svc)
                    }

                    /// Sets the [`UpdateLeaderboard`](crate::operation_shape::UpdateLeaderboard) to a custom [`Service`](tower::Service).
                    /// not constrained by the Smithy contract.
                    fn update_leaderboard_custom<S>(mut self, svc: S) -> Self
                    where
                        S: ::tower::Service<::http::Request<Body>, Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>, Error = ::std::convert::Infallible> + Clone + Send + 'static,
                        S::Future: Send + 'static,
                    {
                        self.update_leaderboard = Some(::aws_smithy_http_server::routing::Route::new(svc));
                        self
                    }
                }

                impl<Body, L, HttpPl, ModelPl> ElasticLeaderboardServiceBuilder<Body, L, HttpPl, ModelPl> {
                    /// Constructs a [`ElasticLeaderboardService`] from the arguments provided to the builder.
                ///
                /// Forgetting to register a handler for one or more operations will result in an error.
                ///
                /// Check out [`ElasticLeaderboardServiceBuilder::build_unchecked`] if you'd prefer the service to return status code 500 when an
                /// unspecified route is requested.
                pub fn build(self) -> Result<
                    ElasticLeaderboardService<
                        ::aws_smithy_http_server::routing::RoutingService<
                            ::aws_smithy_http_server::protocol::rest::router::RestRouter<L::Service>,
                            ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
                        >,
                    >,
                    MissingOperationsError,
                >
                where
                    L: ::tower::Layer<::aws_smithy_http_server::routing::Route<Body>>,
                {
                    let router = {
                        use ::aws_smithy_http_server::operation::OperationShape;
                        let mut missing_operation_names = std::collections::HashMap::new();
                        if self.create_leaderboard.is_none() {
                                missing_operation_names.insert(crate::operation_shape::CreateLeaderboard::ID, ".create_leaderboard()");
                            }
if self.delete_leaderboard.is_none() {
                                missing_operation_names.insert(crate::operation_shape::DeleteLeaderboard::ID, ".delete_leaderboard()");
                            }
if self.get_leaderboard.is_none() {
                                missing_operation_names.insert(crate::operation_shape::GetLeaderboard::ID, ".get_leaderboard()");
                            }
if self.list_leaderboards.is_none() {
                                missing_operation_names.insert(crate::operation_shape::ListLeaderboards::ID, ".list_leaderboards()");
                            }
if self.submit_score_event.is_none() {
                                missing_operation_names.insert(crate::operation_shape::SubmitScoreEvent::ID, ".submit_score_event()");
                            }
if self.update_leaderboard.is_none() {
                                missing_operation_names.insert(crate::operation_shape::UpdateLeaderboard::ID, ".update_leaderboard()");
                            }
                        if !missing_operation_names.is_empty() {
                            return Err(MissingOperationsError {
                                operation_names2setter_methods: missing_operation_names,
                            });
                        }
                        let unexpected_error_msg = "this should never panic since we are supposed to check beforehand that a handler has been registered for this operation; please file a bug report under https://github.com/smithy-lang/smithy-rs/issues";

                        

                        ::aws_smithy_http_server::protocol::rest::router::RestRouter::from_iter([(request_specs::create_leaderboard(), self.create_leaderboard.expect(unexpected_error_msg)),
(request_specs::delete_leaderboard(), self.delete_leaderboard.expect(unexpected_error_msg)),
(request_specs::get_leaderboard(), self.get_leaderboard.expect(unexpected_error_msg)),
(request_specs::list_leaderboards(), self.list_leaderboards.expect(unexpected_error_msg)),
(request_specs::submit_score_event(), self.submit_score_event.expect(unexpected_error_msg)),
(request_specs::update_leaderboard(), self.update_leaderboard.expect(unexpected_error_msg)),])
                    };
                    let svc = ::aws_smithy_http_server::routing::RoutingService::new(router);
                    let svc = svc.map(|s| s.layer(self.layer));
                    Ok(ElasticLeaderboardService { svc })
                }

                    /// Constructs a [`ElasticLeaderboardService`] from the arguments provided to the builder.
                /// Operations without a handler default to returning 500 Internal Server Error to the caller.
                ///
                /// Check out [`ElasticLeaderboardServiceBuilder::build`] if you'd prefer the builder to fail if one or more operations do
                /// not have a registered handler.
                pub fn build_unchecked(self) -> ElasticLeaderboardService<L::Service>
                where
                    Body: Send + 'static,
                    L: ::tower::Layer<
                        ::aws_smithy_http_server::routing::RoutingService<::aws_smithy_http_server::protocol::rest::router::RestRouter<::aws_smithy_http_server::routing::Route<Body>>, ::aws_smithy_http_server::protocol::rest_json_1::RestJson1>
                    >
                {
                    let router = ::aws_smithy_http_server::protocol::rest::router::RestRouter::from_iter([(
                                request_specs::create_leaderboard(),
                                self.create_leaderboard.unwrap_or_else(|| {
                                    let svc = ::aws_smithy_http_server::operation::MissingFailure::<::aws_smithy_http_server::protocol::rest_json_1::RestJson1>::default();
                                    ::aws_smithy_http_server::routing::Route::new(svc)
                                })
                            ),
(
                                request_specs::delete_leaderboard(),
                                self.delete_leaderboard.unwrap_or_else(|| {
                                    let svc = ::aws_smithy_http_server::operation::MissingFailure::<::aws_smithy_http_server::protocol::rest_json_1::RestJson1>::default();
                                    ::aws_smithy_http_server::routing::Route::new(svc)
                                })
                            ),
(
                                request_specs::get_leaderboard(),
                                self.get_leaderboard.unwrap_or_else(|| {
                                    let svc = ::aws_smithy_http_server::operation::MissingFailure::<::aws_smithy_http_server::protocol::rest_json_1::RestJson1>::default();
                                    ::aws_smithy_http_server::routing::Route::new(svc)
                                })
                            ),
(
                                request_specs::list_leaderboards(),
                                self.list_leaderboards.unwrap_or_else(|| {
                                    let svc = ::aws_smithy_http_server::operation::MissingFailure::<::aws_smithy_http_server::protocol::rest_json_1::RestJson1>::default();
                                    ::aws_smithy_http_server::routing::Route::new(svc)
                                })
                            ),
(
                                request_specs::submit_score_event(),
                                self.submit_score_event.unwrap_or_else(|| {
                                    let svc = ::aws_smithy_http_server::operation::MissingFailure::<::aws_smithy_http_server::protocol::rest_json_1::RestJson1>::default();
                                    ::aws_smithy_http_server::routing::Route::new(svc)
                                })
                            ),
(
                                request_specs::update_leaderboard(),
                                self.update_leaderboard.unwrap_or_else(|| {
                                    let svc = ::aws_smithy_http_server::operation::MissingFailure::<::aws_smithy_http_server::protocol::rest_json_1::RestJson1>::default();
                                    ::aws_smithy_http_server::routing::Route::new(svc)
                                })
                            ),]);
                    let svc = self
                        .layer
                        .layer(::aws_smithy_http_server::routing::RoutingService::new(router));
                    ElasticLeaderboardService { svc }
                }
                }

            /// The error encountered when calling the [`ElasticLeaderboardServiceBuilder::build`] method if one or more operation handlers are not
                /// specified.
                #[derive(Debug)]
                pub struct MissingOperationsError {
                    operation_names2setter_methods: std::collections::HashMap<::aws_smithy_http_server::shape_id::ShapeId, &'static str>,
                }

                impl std::fmt::Display for MissingOperationsError {
                    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                        write!(
                            f,
                            "You must specify a handler for all operations attached to `ElasticLeaderboardService`.\n\
                            We are missing handlers for the following operations:\n",
                        )?;
                        for operation_name in self.operation_names2setter_methods.keys() {
                            writeln!(f, "- {}", operation_name.absolute())?;
                        }

                        writeln!(f, "\nUse the dedicated methods on `ElasticLeaderboardServiceBuilder` to register the missing handlers:")?;
                        for setter_name in self.operation_names2setter_methods.values() {
                            writeln!(f, "- {}", setter_name)?;
                        }
                        Ok(())
                    }
                }

                impl std::error::Error for MissingOperationsError {}

            mod request_specs {
                    pub(super) fn create_leaderboard() -> ::aws_smithy_http_server::routing::request_spec::RequestSpec {
                            ::aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    ::http::Method::POST,
                    ::aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        ::aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            ::aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("leaderboards")),
]),
                            ::aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                )
                        }
pub(super) fn delete_leaderboard() -> ::aws_smithy_http_server::routing::request_spec::RequestSpec {
                            ::aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    ::http::Method::DELETE,
                    ::aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        ::aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            ::aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("leaderboards")),
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Label,
]),
                            ::aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                )
                        }
pub(super) fn get_leaderboard() -> ::aws_smithy_http_server::routing::request_spec::RequestSpec {
                            ::aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    ::http::Method::GET,
                    ::aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        ::aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            ::aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("leaderboards")),
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Label,
]),
                            ::aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                )
                        }
pub(super) fn list_leaderboards() -> ::aws_smithy_http_server::routing::request_spec::RequestSpec {
                            ::aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    ::http::Method::GET,
                    ::aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        ::aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            ::aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("leaderboards")),
]),
                            ::aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                )
                        }
pub(super) fn submit_score_event() -> ::aws_smithy_http_server::routing::request_spec::RequestSpec {
                            ::aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    ::http::Method::POST,
                    ::aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        ::aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            ::aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("leaderboards")),
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Label,
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("scores")),
]),
                            ::aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                )
                        }
pub(super) fn update_leaderboard() -> ::aws_smithy_http_server::routing::request_spec::RequestSpec {
                            ::aws_smithy_http_server::routing::request_spec::RequestSpec::new(
                    ::http::Method::PUT,
                    ::aws_smithy_http_server::routing::request_spec::UriSpec::new(
                        ::aws_smithy_http_server::routing::request_spec::PathAndQuerySpec::new(
                            ::aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("leaderboards")),
    ::aws_smithy_http_server::routing::request_spec::PathSegment::Label,
]),
                            ::aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![
])
                        )
                    ),
                )
                        }
                }

            
/// Provides access to leaderboards and top scores
///
                /// See the [root](crate) documentation for more information.
                #[derive(Clone)]
                pub struct ElasticLeaderboardService<
                    S = ::aws_smithy_http_server::routing::RoutingService<
                        ::aws_smithy_http_server::protocol::rest::router::RestRouter<
                            ::aws_smithy_http_server::routing::Route<
                                ::aws_smithy_http_server::body::BoxBody
                            >,
                        >,
                        ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
                    >
                > {
                    // This is the router wrapped by layers.
                    svc: S,
                }

                impl ElasticLeaderboardService<()> {
                    /// Constructs a builder for [`ElasticLeaderboardService`].
                    /// You must specify a configuration object holding any plugins and layers that should be applied
                    /// to the operations in this service.
                    pub fn builder<
                        Body,
                        L,
                        HttpPl: ::aws_smithy_http_server::plugin::HttpMarker,
                        ModelPl: ::aws_smithy_http_server::plugin::ModelMarker,
                    >(
                        config: ElasticLeaderboardServiceConfig<L, HttpPl, ModelPl>,
                    ) -> ElasticLeaderboardServiceBuilder<Body, L, HttpPl, ModelPl> {
                        ElasticLeaderboardServiceBuilder {
                            create_leaderboard: None
, delete_leaderboard: None
, get_leaderboard: None
, list_leaderboards: None
, submit_score_event: None
, update_leaderboard: None,
                            layer: config.layers,
                            http_plugin: config.http_plugins,
                            model_plugin: config.model_plugins,
                        }
                    }

                    /// Constructs a builder for [`ElasticLeaderboardService`].
                    /// You must specify what plugins should be applied to the operations in this service.
                    ///
                    /// Use [`ElasticLeaderboardService::builder_without_plugins`] if you don't need to apply plugins.
                    ///
                    /// Check out [`HttpPlugins`](::aws_smithy_http_server::plugin::HttpPlugins) and
                    /// [`ModelPlugins`](::aws_smithy_http_server::plugin::ModelPlugins) if you need to apply
                    /// multiple plugins.
                    #[deprecated(
                        since = "0.57.0",
                        note = "please use the `builder` constructor and register plugins on the `ElasticLeaderboardServiceConfig` object instead; see https://github.com/smithy-lang/smithy-rs/discussions/3096"
                    )]
                    pub fn builder_with_plugins<
                        Body,
                        HttpPl: ::aws_smithy_http_server::plugin::HttpMarker,
                        ModelPl: ::aws_smithy_http_server::plugin::ModelMarker
                    >(
                        http_plugin: HttpPl,
                        model_plugin: ModelPl
                    ) -> ElasticLeaderboardServiceBuilder<Body, ::tower::layer::util::Identity, HttpPl, ModelPl> {
                        ElasticLeaderboardServiceBuilder {
                            create_leaderboard: None
, delete_leaderboard: None
, get_leaderboard: None
, list_leaderboards: None
, submit_score_event: None
, update_leaderboard: None,
                            layer: ::tower::layer::util::Identity::new(),
                            http_plugin,
                            model_plugin
                        }
                    }

                    /// Constructs a builder for [`ElasticLeaderboardService`].
                    ///
                    /// Use [`ElasticLeaderboardService::builder_with_plugins`] if you need to specify plugins.
                    #[deprecated(
                        since = "0.57.0",
                        note = "please use the `builder` constructor instead; see https://github.com/smithy-lang/smithy-rs/discussions/3096"
                    )]
                    pub fn builder_without_plugins<Body>() -> ElasticLeaderboardServiceBuilder<
                        Body,
                        ::tower::layer::util::Identity,
                        ::aws_smithy_http_server::plugin::IdentityPlugin,
                        ::aws_smithy_http_server::plugin::IdentityPlugin
                    > {
                        Self::builder_with_plugins(::aws_smithy_http_server::plugin::IdentityPlugin, ::aws_smithy_http_server::plugin::IdentityPlugin)
                    }
                }

                impl<S> ElasticLeaderboardService<S> {
                    /// Converts [`ElasticLeaderboardService`] into a [`MakeService`](tower::make::MakeService).
                    pub fn into_make_service(self) -> ::aws_smithy_http_server::routing::IntoMakeService<Self> {
                        ::aws_smithy_http_server::routing::IntoMakeService::new(self)
                    }


                    /// Converts [`ElasticLeaderboardService`] into a [`MakeService`](tower::make::MakeService) with [`ConnectInfo`](::aws_smithy_http_server::request::connect_info::ConnectInfo).
                    pub fn into_make_service_with_connect_info<C>(self) -> ::aws_smithy_http_server::routing::IntoMakeServiceWithConnectInfo<Self, C> {
                        ::aws_smithy_http_server::routing::IntoMakeServiceWithConnectInfo::new(self)
                    }
                }

                impl<S>
                    ElasticLeaderboardService<
                        ::aws_smithy_http_server::routing::RoutingService<
                            ::aws_smithy_http_server::protocol::rest::router::RestRouter<S>,
                            ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
                        >,
                    >
                {
                    /// Applies a [`Layer`](::tower::Layer) uniformly to all routes.
                    #[deprecated(
                        since = "0.57.0",
                        note = "please add layers to the `ElasticLeaderboardServiceConfig` object instead; see https://github.com/smithy-lang/smithy-rs/discussions/3096"
                    )]
                    pub fn layer<L>(
                        self,
                        layer: &L,
                    ) -> ElasticLeaderboardService<
                        ::aws_smithy_http_server::routing::RoutingService<
                            ::aws_smithy_http_server::protocol::rest::router::RestRouter<L::Service>,
                            ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
                        >,
                    >
                    where
                        L: ::tower::Layer<S>,
                    {
                        ElasticLeaderboardService {
                            svc: self.svc.map(|s| s.layer(layer)),
                        }
                    }

                    /// Applies [`Route::new`](::aws_smithy_http_server::routing::Route::new) to all routes.
                    ///
                    /// This has the effect of erasing all types accumulated via layers.
                    pub fn boxed<B>(
                        self,
                    ) -> ElasticLeaderboardService<
                        ::aws_smithy_http_server::routing::RoutingService<
                            ::aws_smithy_http_server::protocol::rest::router::RestRouter<
                                ::aws_smithy_http_server::routing::Route<B>,
                            >,
                            ::aws_smithy_http_server::protocol::rest_json_1::RestJson1,
                        >,
                    >
                    where
                        S: ::tower::Service<
                            ::http::Request<B>,
                            Response = ::http::Response<::aws_smithy_http_server::body::BoxBody>,
                            Error = std::convert::Infallible,
                        >,
                        S: Clone + Send + 'static,
                        S::Future: Send + 'static,
                    {
                        self.layer(&::tower::layer::layer_fn(
                            ::aws_smithy_http_server::routing::Route::new,
                        ))
                    }
                }

                impl<S, R> ::tower::Service<R> for ElasticLeaderboardService<S>
                where
                    S: ::tower::Service<R>,
                {
                    type Response = S::Response;
                    type Error = S::Error;
                    type Future = S::Future;

                    fn poll_ready(&mut self, cx: &mut std::task::Context) -> std::task::Poll<Result<(), Self::Error>> {
                        self.svc.poll_ready(cx)
                    }

                    fn call(&mut self, request: R) -> Self::Future {
                        self.svc.call(request)
                    }
                }

            /// An enumeration of all [operations](https://smithy.io/2.0/spec/service-types.html#operation) in ElasticLeaderboardService.
                #[derive(Debug, PartialEq, Eq, Clone, Copy)]
                pub enum Operation {
                    CreateLeaderboard,DeleteLeaderboard,GetLeaderboard,ListLeaderboards,SubmitScoreEvent,UpdateLeaderboard
                }

                impl Operation {
                    /// Returns the [operations](https://smithy.io/2.0/spec/service-types.html#operation) [`ShapeId`](::aws_smithy_http_server::shape_id::ShapeId).
                    pub fn shape_id(&self) -> ::aws_smithy_http_server::shape_id::ShapeId {
                        match self {
                            Operation::CreateLeaderboard => ::aws_smithy_http_server::shape_id::ShapeId::new("kotlinconf#CreateLeaderboard", "kotlinconf", "CreateLeaderboard")
,Operation::DeleteLeaderboard => ::aws_smithy_http_server::shape_id::ShapeId::new("kotlinconf#DeleteLeaderboard", "kotlinconf", "DeleteLeaderboard")
,Operation::GetLeaderboard => ::aws_smithy_http_server::shape_id::ShapeId::new("kotlinconf#GetLeaderboard", "kotlinconf", "GetLeaderboard")
,Operation::ListLeaderboards => ::aws_smithy_http_server::shape_id::ShapeId::new("kotlinconf#ListLeaderboards", "kotlinconf", "ListLeaderboards")
,Operation::SubmitScoreEvent => ::aws_smithy_http_server::shape_id::ShapeId::new("kotlinconf#SubmitScoreEvent", "kotlinconf", "SubmitScoreEvent")
,Operation::UpdateLeaderboard => ::aws_smithy_http_server::shape_id::ShapeId::new("kotlinconf#UpdateLeaderboard", "kotlinconf", "UpdateLeaderboard")
                        }
                    }
                }
impl<L> ::aws_smithy_http_server::service::ContainsOperation<crate::operation_shape::CreateLeaderboard>
                        for ElasticLeaderboardService<L>
                    {
                        const VALUE: Operation = Operation::CreateLeaderboard;
                    }
impl<L> ::aws_smithy_http_server::service::ContainsOperation<crate::operation_shape::DeleteLeaderboard>
                        for ElasticLeaderboardService<L>
                    {
                        const VALUE: Operation = Operation::DeleteLeaderboard;
                    }
impl<L> ::aws_smithy_http_server::service::ContainsOperation<crate::operation_shape::GetLeaderboard>
                        for ElasticLeaderboardService<L>
                    {
                        const VALUE: Operation = Operation::GetLeaderboard;
                    }
impl<L> ::aws_smithy_http_server::service::ContainsOperation<crate::operation_shape::ListLeaderboards>
                        for ElasticLeaderboardService<L>
                    {
                        const VALUE: Operation = Operation::ListLeaderboards;
                    }
impl<L> ::aws_smithy_http_server::service::ContainsOperation<crate::operation_shape::SubmitScoreEvent>
                        for ElasticLeaderboardService<L>
                    {
                        const VALUE: Operation = Operation::SubmitScoreEvent;
                    }
impl<L> ::aws_smithy_http_server::service::ContainsOperation<crate::operation_shape::UpdateLeaderboard>
                        for ElasticLeaderboardService<L>
                    {
                        const VALUE: Operation = Operation::UpdateLeaderboard;
                    }

            impl<S> ::aws_smithy_http_server::service::ServiceShape for ElasticLeaderboardService<S> {
                    const ID: ::aws_smithy_http_server::shape_id::ShapeId = ::aws_smithy_http_server::shape_id::ShapeId::new("kotlinconf#ElasticLeaderboardService", "kotlinconf", "ElasticLeaderboardService");

                    const VERSION: Option<&'static str> = Some("2020-10-16");

                    type Protocol = ::aws_smithy_http_server::protocol::rest_json_1::RestJson1;

                    type Operations = Operation;
                }
/// Configuration for the [`ElasticLeaderboardService`]. This is the central place where to register and
            /// configure [`::tower::Layer`]s, HTTP plugins, and model plugins.
            ///
            /// ```rust,no_run
            /// # use leaderboard_server_sdk::ElasticLeaderboardServiceConfig;
            /// # use ::aws_smithy_http_server::plugin::IdentityPlugin;
            /// # use ::tower::layer::util::Identity;
            /// # let authentication_plugin = IdentityPlugin;
            /// # let authorization_plugin = IdentityPlugin;
            /// # let server_request_id_provider_layer = Identity::new();
            /// let config = ElasticLeaderboardServiceConfig::builder()
            ///     // Layers get executed first...
            ///     .layer(server_request_id_provider_layer)
            ///     // ...then HTTP plugins...
            ///     .http_plugin(authentication_plugin)
            ///     // ...and right after deserialization, model plugins.
            ///     .model_plugin(authorization_plugin)
            ///     .build();
            /// ```
            ///
            /// See the [`plugin`] system for details.
            ///
            /// [`plugin`]: ::aws_smithy_http_server::plugin
            #[derive(::std::fmt::Debug)]
            pub struct ElasticLeaderboardServiceConfig<L, H, M> {
                layers: L,
                http_plugins: H,
                model_plugins: M,
            }

            impl ElasticLeaderboardServiceConfig<(), (), ()> {
                /// Returns a builder to construct the configuration.
                pub fn builder() -> ElasticLeaderboardServiceConfigBuilder<
                    ::tower::layer::util::Identity,
                    ::aws_smithy_http_server::plugin::IdentityPlugin,
                    ::aws_smithy_http_server::plugin::IdentityPlugin,
                > {
                    ElasticLeaderboardServiceConfigBuilder {
                        layers: ::tower::layer::util::Identity::new(),
                        http_plugins: ::aws_smithy_http_server::plugin::IdentityPlugin,
                        model_plugins: ::aws_smithy_http_server::plugin::IdentityPlugin,
                        
                    }
                }
            }

            /// Builder returned by [`ElasticLeaderboardServiceConfig::builder()`].
            #[derive(::std::fmt::Debug)]
            pub struct ElasticLeaderboardServiceConfigBuilder<L, H, M> {
                pub(crate) layers: L,
                pub(crate) http_plugins: H,
                pub(crate) model_plugins: M,
                
            }

            

            impl<L, H, M> ElasticLeaderboardServiceConfigBuilder<L, H, M> {
                

                /// Add a [`::tower::Layer`] to the service.
                pub fn layer<NewLayer>(self, layer: NewLayer) -> ElasticLeaderboardServiceConfigBuilder<::tower::layer::util::Stack<NewLayer, L>, H, M> {
                    ElasticLeaderboardServiceConfigBuilder {
                        layers: ::tower::layer::util::Stack::new(layer, self.layers),
                        http_plugins: self.http_plugins,
                        model_plugins: self.model_plugins,
                        
                    }
                }

                /// Add a HTTP [plugin] to the service.
                ///
                /// [plugin]: ::aws_smithy_http_server::plugin
                // We eagerly require `NewPlugin: HttpMarker`, despite not really needing it, because compiler
                // errors get _substantially_ better if the user makes a mistake.
                pub fn http_plugin<NewPlugin: ::aws_smithy_http_server::plugin::HttpMarker>(
                    self,
                    http_plugin: NewPlugin,
                ) -> ElasticLeaderboardServiceConfigBuilder<L, ::aws_smithy_http_server::plugin::PluginStack<NewPlugin, H>, M> {
                    ElasticLeaderboardServiceConfigBuilder {
                        layers: self.layers,
                        http_plugins: ::aws_smithy_http_server::plugin::PluginStack::new(http_plugin, self.http_plugins),
                        model_plugins: self.model_plugins,
                        
                    }
                }

                /// Add a model [plugin] to the service.
                ///
                /// [plugin]: ::aws_smithy_http_server::plugin
                // We eagerly require `NewPlugin: ModelMarker`, despite not really needing it, because compiler
                // errors get _substantially_ better if the user makes a mistake.
                pub fn model_plugin<NewPlugin: ::aws_smithy_http_server::plugin::ModelMarker>(
                    self,
                    model_plugin: NewPlugin,
                ) -> ElasticLeaderboardServiceConfigBuilder<L, H, ::aws_smithy_http_server::plugin::PluginStack<NewPlugin, M>> {
                    ElasticLeaderboardServiceConfigBuilder {
                        layers: self.layers,
                        http_plugins: self.http_plugins,
                        model_plugins: ::aws_smithy_http_server::plugin::PluginStack::new(model_plugin, self.model_plugins),
                        
                    }
                }

                /// Build the configuration.
                pub fn build(self) -> super::ElasticLeaderboardServiceConfig<L, H, M> {
    
    super::ElasticLeaderboardServiceConfig {
                                layers: self.layers,
                                http_plugins: self.http_plugins,
                                model_plugins: self.model_plugins,
                            }
}
            }
/// A macro to help with scoping [plugins](::aws_smithy_http_server::plugin) to a subset of all operations.
                ///
                /// In contrast to [`aws_smithy_http_server::scope`](::aws_smithy_http_server::scope), this macro has knowledge
                /// of the service and any operations _not_ specified will be placed in the opposing group.
                ///
                /// # Example
                ///
                /// ```rust
                /// scope! {
                ///     /// Includes [`CreateLeaderboard`], excluding all other operations.
                ///     struct ScopeA {
                ///         includes: [CreateLeaderboard]
                ///     }
                /// }
                ///
                /// scope! {
                ///     /// Excludes [`CreateLeaderboard`], excluding all other operations.
                ///     struct ScopeB {
                ///         excludes: [CreateLeaderboard]
                ///     }
                /// }
                ///
                /// # use ::aws_smithy_http_server::plugin::{Plugin, Scoped};
                /// # use leaderboard_server_sdk::scope;
                /// # struct MockPlugin;
                /// # impl<S, Op, T> Plugin<S, Op, T> for MockPlugin { type Output = u32; fn apply(&self, input: T) -> u32 { 3 } }
                /// # let scoped_a = Scoped::new::<ScopeA>(MockPlugin);
                /// # let scoped_b = Scoped::new::<ScopeB>(MockPlugin);
                /// # let a = Plugin::<(), leaderboard_server_sdk::operation_shape::CreateLeaderboard, u64>::apply(&scoped_a, 6);
                /// # let b = Plugin::<(), leaderboard_server_sdk::operation_shape::CreateLeaderboard, u64>::apply(&scoped_b, 6);
                /// # assert_eq!(a, 3_u32);
                /// # assert_eq!(b, 6_u64);
                /// ```
                #[macro_export]
                macro_rules! scope {
                    // Completed, render impls
                    (@ $ name: ident, $ contains: ident () ($($ temp: ident)*) ($($ not_member: ident)*)) => {
                        $(
                            impl ::aws_smithy_http_server::plugin::scoped::Membership<$ temp> for $ name {
                                type Contains = ::aws_smithy_http_server::plugin::scoped::$ contains;
                            }
                        )*
                        $(
                            impl ::aws_smithy_http_server::plugin::scoped::Membership<$ not_member> for $ name {
                                type Contains = ::aws_smithy_http_server::plugin::scoped::$ contains;
                            }
                        )*
                    };
                    // All `not_member`s exhausted, move `temp` into `not_member`
                    (@ $ name: ident, $ contains: ident ($($ member: ident)*) ($($ temp: ident)*) ()) => {
                        scope! { @ $ name, $ contains ($($ member)*) () ($($ temp)*) }
                    };
                    
                        // CreateLeaderboard match found, pop from both `member` and `not_member`
                        (@ $ name: ident, $ contains: ident (CreateLeaderboard $($ member: ident)*) ($($ temp: ident)*) (CreateLeaderboard $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains ($($ member)*) ($($ temp)*) ($($ not_member)*) }
                        };
                        // CreateLeaderboard match not found, pop from `not_member` into `temp` stack
                        (@ $ name: ident, $ contains: ident (CreateLeaderboard $($ member: ident)*) ($($ temp: ident)*) ($ other: ident $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains (CreateLeaderboard $($ member)*) ($ other $($ temp)*) ($($ not_member)*) }
                        };
                        
                        // DeleteLeaderboard match found, pop from both `member` and `not_member`
                        (@ $ name: ident, $ contains: ident (DeleteLeaderboard $($ member: ident)*) ($($ temp: ident)*) (DeleteLeaderboard $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains ($($ member)*) ($($ temp)*) ($($ not_member)*) }
                        };
                        // DeleteLeaderboard match not found, pop from `not_member` into `temp` stack
                        (@ $ name: ident, $ contains: ident (DeleteLeaderboard $($ member: ident)*) ($($ temp: ident)*) ($ other: ident $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains (DeleteLeaderboard $($ member)*) ($ other $($ temp)*) ($($ not_member)*) }
                        };
                        
                        // GetLeaderboard match found, pop from both `member` and `not_member`
                        (@ $ name: ident, $ contains: ident (GetLeaderboard $($ member: ident)*) ($($ temp: ident)*) (GetLeaderboard $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains ($($ member)*) ($($ temp)*) ($($ not_member)*) }
                        };
                        // GetLeaderboard match not found, pop from `not_member` into `temp` stack
                        (@ $ name: ident, $ contains: ident (GetLeaderboard $($ member: ident)*) ($($ temp: ident)*) ($ other: ident $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains (GetLeaderboard $($ member)*) ($ other $($ temp)*) ($($ not_member)*) }
                        };
                        
                        // ListLeaderboards match found, pop from both `member` and `not_member`
                        (@ $ name: ident, $ contains: ident (ListLeaderboards $($ member: ident)*) ($($ temp: ident)*) (ListLeaderboards $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains ($($ member)*) ($($ temp)*) ($($ not_member)*) }
                        };
                        // ListLeaderboards match not found, pop from `not_member` into `temp` stack
                        (@ $ name: ident, $ contains: ident (ListLeaderboards $($ member: ident)*) ($($ temp: ident)*) ($ other: ident $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains (ListLeaderboards $($ member)*) ($ other $($ temp)*) ($($ not_member)*) }
                        };
                        
                        // SubmitScoreEvent match found, pop from both `member` and `not_member`
                        (@ $ name: ident, $ contains: ident (SubmitScoreEvent $($ member: ident)*) ($($ temp: ident)*) (SubmitScoreEvent $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains ($($ member)*) ($($ temp)*) ($($ not_member)*) }
                        };
                        // SubmitScoreEvent match not found, pop from `not_member` into `temp` stack
                        (@ $ name: ident, $ contains: ident (SubmitScoreEvent $($ member: ident)*) ($($ temp: ident)*) ($ other: ident $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains (SubmitScoreEvent $($ member)*) ($ other $($ temp)*) ($($ not_member)*) }
                        };
                        
                        // UpdateLeaderboard match found, pop from both `member` and `not_member`
                        (@ $ name: ident, $ contains: ident (UpdateLeaderboard $($ member: ident)*) ($($ temp: ident)*) (UpdateLeaderboard $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains ($($ member)*) ($($ temp)*) ($($ not_member)*) }
                        };
                        // UpdateLeaderboard match not found, pop from `not_member` into `temp` stack
                        (@ $ name: ident, $ contains: ident (UpdateLeaderboard $($ member: ident)*) ($($ temp: ident)*) ($ other: ident $($ not_member: ident)*)) => {
                            scope! { @ $ name, $ contains (UpdateLeaderboard $($ member)*) ($ other $($ temp)*) ($($ not_member)*) }
                        };
                        
                    (
                        $(#[$ attrs:meta])*
                        $ vis:vis struct $ name:ident {
                            includes: [$($ include:ident),*]
                        }
                    ) => {
                        use $ crate::operation_shape::*;
                        ::aws_smithy_http_server::scope! {
                            $(#[$ attrs])*
                            $ vis struct $ name {
                                includes: [$($ include),*],
                                excludes: []
                            }
                        }
                        scope! { @ $ name, False ($($ include)*) () (CreateLeaderboard DeleteLeaderboard GetLeaderboard ListLeaderboards SubmitScoreEvent UpdateLeaderboard) }
                    };
                    (
                        $(#[$ attrs:meta])*
                        $ vis:vis struct $ name:ident {
                            excludes: [$($ exclude:ident),*]
                        }
                    ) => {
                        use $ crate::operation_shape::*;

                        ::aws_smithy_http_server::scope! {
                            $(#[$ attrs])*
                            $ vis struct $ name {
                                includes: [],
                                excludes: [$($ exclude),*]
                            }
                        }
                        scope! { @ $ name, True ($($ exclude)*) () (CreateLeaderboard DeleteLeaderboard GetLeaderboard ListLeaderboards SubmitScoreEvent UpdateLeaderboard) }
                    };
                }

