// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[derive(::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash)]
pub struct SubmitScoreEventOutput  {
}
impl  SubmitScoreEventOutput  {
    /// Creates a new builder-style object to manufacture [`SubmitScoreEventOutput`](crate::output::SubmitScoreEventOutput).
    pub fn builder() -> crate::output::submit_score_event_output::Builder  {
        crate::output::submit_score_event_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash)]
pub struct DeleteLeaderboardOutput  {
}
impl  DeleteLeaderboardOutput  {
    /// Creates a new builder-style object to manufacture [`DeleteLeaderboardOutput`](crate::output::DeleteLeaderboardOutput).
    pub fn builder() -> crate::output::delete_leaderboard_output::Builder  {
        crate::output::delete_leaderboard_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash)]
pub struct UpdateLeaderboardOutput  {
}
impl  UpdateLeaderboardOutput  {
    /// Creates a new builder-style object to manufacture [`UpdateLeaderboardOutput`](crate::output::UpdateLeaderboardOutput).
    pub fn builder() -> crate::output::update_leaderboard_output::Builder  {
        crate::output::update_leaderboard_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash)]
pub struct GetLeaderboardOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub name: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub max_entries: ::std::option::Option<crate::model::MaxEntries>,
    #[allow(missing_docs)] // documentation missing in model
    pub high_scores: ::std::option::Option<::std::vec::Vec::<crate::model::ScoreEvent>>,
}
impl  GetLeaderboardOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn name(&self) -> ::std::option::Option<& str> {
        self.name.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn max_entries(&self) -> ::std::option::Option<& crate::model::MaxEntries> {
        self.max_entries.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn high_scores(&self) -> ::std::option::Option<& [crate::model::ScoreEvent]> {
        self.high_scores.as_deref()
    }
}
impl  GetLeaderboardOutput  {
    /// Creates a new builder-style object to manufacture [`GetLeaderboardOutput`](crate::output::GetLeaderboardOutput).
    pub fn builder() -> crate::output::get_leaderboard_output::Builder  {
        crate::output::get_leaderboard_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash)]
pub struct CreateLeaderboardOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub id: crate::model::LeaderboardId,
}
impl  CreateLeaderboardOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn id(&self) -> & crate::model::LeaderboardId {
        &self.id
    }
}
impl  CreateLeaderboardOutput  {
    /// Creates a new builder-style object to manufacture [`CreateLeaderboardOutput`](crate::output::CreateLeaderboardOutput).
    pub fn builder() -> crate::output::create_leaderboard_output::Builder  {
        crate::output::create_leaderboard_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[derive(::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::PartialEq, ::std::fmt::Debug, ::std::hash::Hash)]
pub struct ListLeaderboardsOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub leaderboards: ::std::option::Option<::std::vec::Vec::<crate::model::LeaderboardSummary>>,
    #[allow(missing_docs)] // documentation missing in model
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl  ListLeaderboardsOutput  {
    #[allow(missing_docs)] // documentation missing in model
    pub fn leaderboards(&self) -> ::std::option::Option<& [crate::model::LeaderboardSummary]> {
        self.leaderboards.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> ::std::option::Option<& str> {
        self.next_token.as_deref()
    }
}
impl  ListLeaderboardsOutput  {
    /// Creates a new builder-style object to manufacture [`ListLeaderboardsOutput`](crate::output::ListLeaderboardsOutput).
    pub fn builder() -> crate::output::list_leaderboards_output::Builder  {
        crate::output::list_leaderboards_output::Builder::default()
    }
}
/// See [`SubmitScoreEventOutput`](crate::output::SubmitScoreEventOutput).
/// 
pub mod submit_score_event_output {
    
    impl ::std::convert::From<Builder > for crate::output::SubmitScoreEventOutput  {
                    fn from(builder: Builder) -> Self {
                        builder.build()
                    }
                }
    /// A builder for [`SubmitScoreEventOutput`](crate::output::SubmitScoreEventOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
    }
    impl  Builder  {
        /// Consumes the builder and constructs a [`SubmitScoreEventOutput`](crate::output::SubmitScoreEventOutput).
        pub fn build(self) -> crate::output::SubmitScoreEventOutput {
                        self.build_enforcing_all_constraints()
                    }
        fn build_enforcing_all_constraints(self) -> crate::output::SubmitScoreEventOutput {
            crate::output::SubmitScoreEventOutput {
            }
        }
    }
    
    
    
    
}
/// See [`DeleteLeaderboardOutput`](crate::output::DeleteLeaderboardOutput).
/// 
pub mod delete_leaderboard_output {
    
    impl ::std::convert::From<Builder > for crate::output::DeleteLeaderboardOutput  {
                    fn from(builder: Builder) -> Self {
                        builder.build()
                    }
                }
    /// A builder for [`DeleteLeaderboardOutput`](crate::output::DeleteLeaderboardOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
    }
    impl  Builder  {
        /// Consumes the builder and constructs a [`DeleteLeaderboardOutput`](crate::output::DeleteLeaderboardOutput).
        pub fn build(self) -> crate::output::DeleteLeaderboardOutput {
                        self.build_enforcing_all_constraints()
                    }
        fn build_enforcing_all_constraints(self) -> crate::output::DeleteLeaderboardOutput {
            crate::output::DeleteLeaderboardOutput {
            }
        }
    }
    
    
    
    
}
/// See [`UpdateLeaderboardOutput`](crate::output::UpdateLeaderboardOutput).
/// 
pub mod update_leaderboard_output {
    
    impl ::std::convert::From<Builder > for crate::output::UpdateLeaderboardOutput  {
                    fn from(builder: Builder) -> Self {
                        builder.build()
                    }
                }
    /// A builder for [`UpdateLeaderboardOutput`](crate::output::UpdateLeaderboardOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
    }
    impl  Builder  {
        /// Consumes the builder and constructs a [`UpdateLeaderboardOutput`](crate::output::UpdateLeaderboardOutput).
        pub fn build(self) -> crate::output::UpdateLeaderboardOutput {
                        self.build_enforcing_all_constraints()
                    }
        fn build_enforcing_all_constraints(self) -> crate::output::UpdateLeaderboardOutput {
            crate::output::UpdateLeaderboardOutput {
            }
        }
    }
    
    
    
    
}
/// See [`GetLeaderboardOutput`](crate::output::GetLeaderboardOutput).
/// 
pub mod get_leaderboard_output {
    
    impl ::std::convert::From<Builder > for crate::output::GetLeaderboardOutput  {
                    fn from(builder: Builder) -> Self {
                        builder.build()
                    }
                }
    /// A builder for [`GetLeaderboardOutput`](crate::output::GetLeaderboardOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: ::std::option::Option<::std::string::String>,
        pub(crate) max_entries: ::std::option::Option<crate::model::MaxEntries>,
        pub(crate) high_scores: ::std::option::Option<::std::vec::Vec::<crate::model::ScoreEvent>>,
    }
    impl  Builder  {
        #[allow(missing_docs)] // documentation missing in model
        pub fn name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
            self.name =
                input
            ; self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn max_entries(mut self, input: ::std::option::Option<crate::model::MaxEntries>) -> Self {
            self.max_entries =
                input
            ; self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn high_scores(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::model::ScoreEvent>>) -> Self {
            self.high_scores =
                input
            ; self
        }
        /// Consumes the builder and constructs a [`GetLeaderboardOutput`](crate::output::GetLeaderboardOutput).
        pub fn build(self) -> crate::output::GetLeaderboardOutput {
                        self.build_enforcing_all_constraints()
                    }
        fn build_enforcing_all_constraints(self) -> crate::output::GetLeaderboardOutput {
            crate::output::GetLeaderboardOutput {
                name: self.name
                ,
                max_entries: self.max_entries
                ,
                high_scores: self.high_scores
                ,
            }
        }
    }
    
    
    
    
}
/// See [`CreateLeaderboardOutput`](crate::output::CreateLeaderboardOutput).
/// 
pub mod create_leaderboard_output {
    
    #[derive(::std::cmp::PartialEq, ::std::fmt::Debug)]
    /// Holds one variant for each of the ways the builder can fail.
    #[non_exhaustive]
    
                #[allow(clippy::enum_variant_names)]
                pub enum ConstraintViolation {
        /// `id` was not provided but it is required when building `CreateLeaderboardOutput`.
        MissingId,
    }
    impl ::std::fmt::Display for ConstraintViolation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                ConstraintViolation::MissingId => write!(f, "`id` was not provided but it is required when building `CreateLeaderboardOutput`"),
            }
        }
    }
    impl ::std::error::Error for ConstraintViolation { }
    impl  ::std::convert::TryFrom<Builder > for crate::output::CreateLeaderboardOutput {
                    type Error = ConstraintViolation;
    
                    fn try_from(builder: Builder ) -> Result<Self, Self::Error> {
                        builder.build()
                    }
                }
    /// A builder for [`CreateLeaderboardOutput`](crate::output::CreateLeaderboardOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: ::std::option::Option<crate::model::LeaderboardId>,
    }
    impl  Builder  {
        #[allow(missing_docs)] // documentation missing in model
        pub fn id(mut self, input: crate::model::LeaderboardId) -> Self {
            self.id =
                Some(
                    input
                )
            ; self
        }
        /// Consumes the builder and constructs a [`CreateLeaderboardOutput`](crate::output::CreateLeaderboardOutput).
        /// 
        /// The builder fails to construct a [`CreateLeaderboardOutput`](crate::output::CreateLeaderboardOutput) if a [`ConstraintViolation`] occurs.
        /// 
        pub fn build(self) -> Result<crate::output::CreateLeaderboardOutput , ConstraintViolation> {
                        self.build_enforcing_all_constraints()
                    }
        fn build_enforcing_all_constraints(self) -> Result<crate::output::CreateLeaderboardOutput , ConstraintViolation> {
            Ok(
                crate::output::CreateLeaderboardOutput {
                    id: self.id
                        .ok_or(ConstraintViolation::MissingId)?
                    ,
                }
            )
        }
    }
    
    
    
    
}
/// See [`ListLeaderboardsOutput`](crate::output::ListLeaderboardsOutput).
/// 
pub mod list_leaderboards_output {
    
    impl ::std::convert::From<Builder > for crate::output::ListLeaderboardsOutput  {
                    fn from(builder: Builder) -> Self {
                        builder.build()
                    }
                }
    /// A builder for [`ListLeaderboardsOutput`](crate::output::ListLeaderboardsOutput).
    #[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
    pub struct Builder {
        pub(crate) leaderboards: ::std::option::Option<::std::vec::Vec::<crate::model::LeaderboardSummary>>,
        pub(crate) next_token: ::std::option::Option<::std::string::String>,
    }
    impl  Builder  {
        #[allow(missing_docs)] // documentation missing in model
        pub fn leaderboards(mut self, input: ::std::option::Option<::std::vec::Vec::<crate::model::LeaderboardSummary>>) -> Self {
            self.leaderboards =
                input
            ; self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
            self.next_token =
                input
            ; self
        }
        /// Consumes the builder and constructs a [`ListLeaderboardsOutput`](crate::output::ListLeaderboardsOutput).
        pub fn build(self) -> crate::output::ListLeaderboardsOutput {
                        self.build_enforcing_all_constraints()
                    }
        fn build_enforcing_all_constraints(self) -> crate::output::ListLeaderboardsOutput {
            crate::output::ListLeaderboardsOutput {
                leaderboards: self.leaderboards
                ,
                next_token: self.next_token
                ,
            }
        }
    }
    
    
    
    
}

